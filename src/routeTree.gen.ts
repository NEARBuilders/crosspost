/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LayoutImport } from "./routes/_layout";
import { Route as LayoutIndexImport } from "./routes/_layout/index";
import { Route as LayoutManageIndexImport } from "./routes/_layout/manage/index";
import { Route as LayoutLeaderboardIndexImport } from "./routes/_layout/leaderboard/index";
import { Route as LayoutEditorIndexImport } from "./routes/_layout/editor/index";

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any);

const LayoutIndexRoute = LayoutIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutManageIndexRoute = LayoutManageIndexImport.update({
  id: "/manage/",
  path: "/manage/",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutLeaderboardIndexRoute = LayoutLeaderboardIndexImport.update({
  id: "/leaderboard/",
  path: "/leaderboard/",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutEditorIndexRoute = LayoutEditorIndexImport.update({
  id: "/editor/",
  path: "/editor/",
  getParentRoute: () => LayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/": {
      id: "/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof LayoutIndexImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/editor/": {
      id: "/_layout/editor/";
      path: "/editor";
      fullPath: "/editor";
      preLoaderRoute: typeof LayoutEditorIndexImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/leaderboard/": {
      id: "/_layout/leaderboard/";
      path: "/leaderboard";
      fullPath: "/leaderboard";
      preLoaderRoute: typeof LayoutLeaderboardIndexImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/manage/": {
      id: "/_layout/manage/";
      path: "/manage";
      fullPath: "/manage";
      preLoaderRoute: typeof LayoutManageIndexImport;
      parentRoute: typeof LayoutImport;
    };
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute;
  LayoutEditorIndexRoute: typeof LayoutEditorIndexRoute;
  LayoutLeaderboardIndexRoute: typeof LayoutLeaderboardIndexRoute;
  LayoutManageIndexRoute: typeof LayoutManageIndexRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutEditorIndexRoute: LayoutEditorIndexRoute,
  LayoutLeaderboardIndexRoute: LayoutLeaderboardIndexRoute,
  LayoutManageIndexRoute: LayoutManageIndexRoute,
};

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren);

export interface FileRoutesByFullPath {
  "": typeof LayoutRouteWithChildren;
  "/": typeof LayoutIndexRoute;
  "/editor": typeof LayoutEditorIndexRoute;
  "/leaderboard": typeof LayoutLeaderboardIndexRoute;
  "/manage": typeof LayoutManageIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof LayoutIndexRoute;
  "/editor": typeof LayoutEditorIndexRoute;
  "/leaderboard": typeof LayoutLeaderboardIndexRoute;
  "/manage": typeof LayoutManageIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_layout": typeof LayoutRouteWithChildren;
  "/_layout/": typeof LayoutIndexRoute;
  "/_layout/editor/": typeof LayoutEditorIndexRoute;
  "/_layout/leaderboard/": typeof LayoutLeaderboardIndexRoute;
  "/_layout/manage/": typeof LayoutManageIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "" | "/" | "/editor" | "/leaderboard" | "/manage";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/editor" | "/leaderboard" | "/manage";
  id:
    | "__root__"
    | "/_layout"
    | "/_layout/"
    | "/_layout/editor/"
    | "/_layout/leaderboard/"
    | "/_layout/manage/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/editor/",
        "/_layout/leaderboard/",
        "/_layout/manage/"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/editor/": {
      "filePath": "_layout/editor/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/leaderboard/": {
      "filePath": "_layout/leaderboard/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/manage/": {
      "filePath": "_layout/manage/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
